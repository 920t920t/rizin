---
import type { Bout, Fighter, VoteCounts } from '@lib/types';
import VoteWidget from './VoteWidget.astro';
const { bouts, votes, fighters } = Astro.props as { bouts: Bout[]; votes: VoteCounts; fighters?: Fighter[] };
const nameMap: Record<string, string> = Object.fromEntries((fighters ?? []).map(f => [f.id, f.name]));
---
<section aria-labelledby="featured-heading" style="margin-top:16px;">
  <h2 id="featured-heading">注目マッチアップ</h2>
  <div style="display:flex;gap:8px;align-items:center;margin:8px 0 12px;">
    <label class="muted" for="sort-bouts">並び替え:</label>
    <select id="sort-bouts" class="card" style="padding:8px;">
      <option value="popular">人気順（投票多→少）</option>
      <option value="pair">組み合わせ（キー昇順）</option>
    </select>
    <span id="bouts-count" class="muted" style="font-size:12px;" aria-live="polite"></span>
  </div>
  <div id="bouts-list" class="grid" role="list" aria-label="注目マッチアップ">
    {(bouts).map((b) => {
      const key = [b.fighterId, b.opponentId].sort().join('_');
      const initial = votes[key] ?? 0;
      return (
        <div class="card" role="listitem" data-key={key} data-votes={String(initial)}>
          <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;">
            <div>
              <div><strong>{nameMap[b.fighterId] ?? b.fighterId}</strong> vs <strong>{nameMap[b.opponentId] ?? b.opponentId}</strong></div>
              <div class="muted" style="font-size:12px;">{b.event ?? ''} {b.notes ?? ''}</div>
            </div>
            <VoteWidget fighterId={b.fighterId} opponentId={b.opponentId} initialCount={initial} />
          </div>
          <div style="margin-top:8px;display:flex;gap:8px;">
            <button class="btn" data-share={key}>共有画像を作成</button>
            <a class="btn" target="_blank" rel="noopener noreferrer" href={`https://twitter.com/intent/tweet?text=${encodeURIComponent('見たい対戦: ' + (nameMap[b.fighterId] ?? b.fighterId) + ' vs ' + (nameMap[b.opponentId] ?? b.opponentId))}&url=`}>Xで共有</a>
          </div>
        </div>
      );
    })}
  </div>

  <div style="margin-top:12px;">
    <button id="export-votes" class="btn">ローカル投票をエクスポート</button>
  </div>
</section>

<script>
  // sort toggle
  const list = document.getElementById('bouts-list');
  const select = document.getElementById('sort-bouts');
  const count = document.getElementById('bouts-count');
  const items = () => Array.from(list?.children || []);

  function applySort() {
    const mode = (select instanceof HTMLSelectElement) ? select.value : 'popular';
    const els = items();
    const frag = document.createDocumentFragment();
    els.sort((a, b) => {
      if (mode === 'pair') {
        return (a.getAttribute('data-key') || '').localeCompare((b.getAttribute('data-key') || ''));
      }
      const av = parseInt(a.getAttribute('data-votes') || '0', 10);
      const bv = parseInt(b.getAttribute('data-votes') || '0', 10);
      return bv - av; // popular: desc
    }).forEach(el => frag.appendChild(el));
    if (list) list.appendChild(frag);
    if (count) count.textContent = `${els.length}件`;
  }

  select?.addEventListener('change', applySort);
  applySort();

  function collectVotes() {
    const votes = {};
    for (let i = 0; i < localStorage.length; i++) {
      const k = localStorage.key(i);
      if (!k) continue;
      if (k.startsWith('vote:delta:')) {
        const key = k.replace('vote:delta:', '');
        const val = parseInt(localStorage.getItem(k) || '0', 10) || 0;
        if (val > 0) votes[key] = val;
      }
    }
    return {
      exportedAt: new Date().toISOString(),
      cooldownMs: 24 * 60 * 60 * 1000,
      votes
    };
  }

  function downloadJSON(obj, filename) {
    const blob = new Blob([JSON.stringify(obj, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  document.getElementById('export-votes')?.addEventListener('click', () => {
    const data = collectVotes();
    downloadJSON(data, 'local_votes.json');
  });

  // Share image generator (client-only)
  function drawCard({w=1200,h=630,f1='Fighter A',f2='Fighter B',subtitle=''}){
    const c=document.createElement('canvas');c.width=w;c.height=h;const g=c.getContext('2d');
    const grd=g.createLinearGradient(0,0,w,h);grd.addColorStop(0,'#0b0b0b');grd.addColorStop(1,'#131313');g.fillStyle=grd;g.fillRect(0,0,w,h);
    g.fillStyle='#222';g.fillRect(w/2-6,0,12,h);
    g.fillStyle='#f5f5f5';g.font='bold 72px system-ui, -apple-system, Segoe UI, Roboto';g.textAlign='center';
    g.fillText('RIZIN DREAM MATCH', w/2, 140);
    // fit names
    function fitFont(text, maxWidth){
      let size=96; let font=(s)=>`bold ${s}px system-ui, -apple-system, Segoe UI, Roboto`;
      while(size>28){ g.font=font(size); if(g.measureText(text).width<=maxWidth) break; size-=4; }
      g.font=font(size);
    }
    g.fillStyle='#e5e5e5';
    const colW = w*0.4;
    g.textAlign='center';
    fitFont(f1, colW);
    g.fillText(f1, w*0.33, h/2);
    fitFont(f2, colW);
    g.fillText(f2, w*0.67, h/2);
    g.fillStyle='#16a34a';g.font='bold 64px system-ui, -apple-system, Segoe UI, Roboto';
    g.fillText('VS', w/2, h/2);
    if(subtitle){g.fillStyle='#b5b5b5';g.font='32px system-ui, -apple-system, Segoe UI, Roboto';g.fillText(subtitle,w/2,h-80);} 
    return c.toDataURL('image/png');
  }

  document.querySelectorAll('[data-share]')?.forEach(btn=>{
    btn.addEventListener('click', async ()=>{
      const key=btn.getAttribute('data-share');
      const allStrong=document.querySelectorAll(`[data-key="${key}"] strong`);
      const f1=(allStrong[0] && allStrong[0].textContent) || 'Fighter A';
      const f2=(allStrong[1] && allStrong[1].textContent) || 'Fighter B';
      const subtitle=document.querySelector(`[data-key="${key}"] .muted`)?.textContent?.trim() || '';
      const url=drawCard({f1,f2,subtitle});
      const aEl=document.createElement('a');aEl.href=url;aEl.download=`${key}.png`;aEl.click();
      if (navigator.share && navigator.canShare) {
        try{
          const res=await fetch(url);const blob=await res.blob();
          const file=new File([blob], `${key}.png`, {type:'image/png'});
          if (navigator.canShare({files:[file]})) await navigator.share({files:[file], title:'RIZIN DREAM MATCH', text:`${f1} vs ${f2}`});
        }catch(e){/* ignore */}
      }
    });
  });
</script>
